#!/bin/bash -eu


ORIG_PROG_BIN="$0"


set_globals()
{
    PROG_BIN="$(abspath "$ORIG_PROG_BIN")"
    PROG_DIR="$(dirname "$PROG_BIN")"
    PROG_NAME="$(basename "$PROG_BIN")"
    USER_CONF="$HOME/.$PROG_NAME"
    CONFIG_DIR="$(abspath "$PROG_DIR/../etc")"
    CONFIG="$CONFIG_DIR/$PROG_NAME.conf"
    LIB_DIR="$(abspath "$PROG_DIR/../lib")"
    JQ_SCRIPT="$LIB_DIR/$PROG_NAME.jq"
    GOCD_URL_BASE="http://ci.rancher.c1.io/go"
    GOCD_URL_LOGIN="$GOCD_URL_BASE/plugin/interact/github.oauth.login/index"
    GOCD_URL_API="$GOCD_URL_BASE/api"
    GOCD_URL_AUTH_CHECK="$GOCD_URL_API/jobs/scheduled.xml"
    GITHUB_URL_BASE="https://github.com"
    GITHUB_URL_LOGIN_1="$GITHUB_URL_BASE/session"
    GITHUB_URL_LOGIN_2="$GITHUB_URL_BASE/sessions/two-factor"
    COOKIE_JAR="/tmp/$PROG_NAME.cookies.curl"

    GITHUB_USER=""
    GITHUB_PASSWORD=""

    USAGE="$PROG_NAME [options]...

Create/update GoCD jobs for Cognitive Scale programmatically
from a template.

You can set these options in $USER_CONF using
the argument names documented here.

Options:

    -u GITHUB_USER
        Github username for authentication with GoCD

    -c CONFIG
        configure of jobs to update/create
        (default: $CONFIG)

    -h
       print this usage information"
}


main()
{
    set_globals
    source_conf
    parse_options "$@"
    validate_options
    if not_authenticated "$GOCD_URL_AUTH_CHECK" "$COOKIE_JAR"
    then
        rm "$COOKIE_JAR"
        authenticate \
            "$GOCD_URL_LOGIN" \
            "$GITHUB_URL_LOGIN_1" \
            "$GITHUB_URL_LOGIN_2" \
            "$COOKIE_JAR" \
            "$GITHUB_USER" \
            "$GITHUB_PASSWORD"
    fi
    . "$CONFIG"
}


source_conf()
{
    if [ -r "$USER_CONF" ]
    then . "$USER_CONF"
    fi
}


parse_options()
{
    while getopts c:u:h o
    do
        case ${o} in
            c) CONFIG="$OPTARG";;
            u) GITHUB_USER="$OPTARG";;
            h) echo "$USAGE"; exit 0;;
            \?) die "missing required argument to switch";;
        esac
    done
}


validate_options()
{
   if [ -z "$GITHUB_USER" ]
   then die "no GitHub username specified (-u)"
   fi
}


not_authenticated()
{
    local url="$1"
    local cookie_jar="$2"
    local status
    status="$(http_status "$url" "$cookie_jar" "*/*")"
    if [ -z "$status" ]
    then die "$url couldn't be contacted"
    elif [ "$status" -eq 200 ]
    then return 1
    elif [ "$status" -eq 401 ]
    then return 0
    else die "$url returned error: $status"
    fi
}


authenticate()
{
    local gocd_url_auth="$1"
    local github_url_auth="$2"
    local github_url_twofactor="$3"
    local cookie_jar="$4"
    local user="$5"
    get_password "GitHub" "$6"
    "${PASSWORD:?Need to set PASSWORD non-empty}"
    local github_password="$PASSWORD"
    local token1
    token1="$(get_gocd_auth_token "$gocd_url_auth" "$cookie_jar")"
    local token2
    token2="$(
        get_github_auth_token \
            "$github_url_auth" \
            "$cookie_jar" \
            "$token1" \
            "$user" \
            "$github_password")"
    get_password "GitHub One-time Password (2-factor authentication)" ""
    local github_otp="$PASSWORD"
    github_two_factor \
        "$github_url_twofactor" "$cookie_jar" "$token2" "$github_otp"
}


get_gocd_auth_token()
{
    local url="$1"
    local cookie_jar="$2"
    local token
    token="$(
        if ! curl --fail --silent --location \
            --max-time 2 \
            --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
            "$url"
        then die "problem getting auth token: $url"
        fi \
        | grep -Po 'authenticity_token.*value="([^"]+)"' \
        | tail -1)"
    token="${token##*value=\"}"
    echo "${token%\"}"
}


get_github_auth_token()
{
    local url="$1"
    local cookie_jar="$2"
    local gocd_token="$3"
    local user="$4"
    local password="$5"
    local token
    token="$(
        if ! curl --fail --silent --location --include \
            --max-time 2 \
            --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
            --data 'commit=Sign+in' \
            --data 'utf8=%E2%9C%93' \
            --data-urlencode "authenticity_token=$gocd_token" \
            --data-urlencode "login=$user" \
            --data-urlencode "password=$password" \
            "$url"
        then die "problem getting auth token: $url"
        fi)"
    if echo "$token" | grep --ignore-case --quiet "incorrect"
    then die "invalid password or username: $url"
    fi
    token="$(
        echo "$token" \
        | grep -Po 'authenticity_token.*value="([^"]+)"' \
        | tail -1)"
    token="${token##*value=\"}"
    echo "${token%\"}"
}


github_two_factor()
{
    local url="$1"
    local cookie_jar="$2"
    local auth_token="$3"
    local one_time_password="$4"
    result="$(
        if ! curl --fail --silent --location \
            --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
            --data-urlencode "authenticity_token=$auth_token" \
            --data "otp=$one_time_password" \
            --data 'utf8=%E2%9C%93' \
            "$url"
        then die "couldn't two-factor authenticate: $url"
        fi)"
    echo "$result"
    if ! echo "$result" | grep --ignore-case --quiet "thoughtworks"
    then die "bad one-time password: $url"
    fi
}


get_password()
{
    local name="$1"
    local default="$2"
    local password
    if [ -n "$default" ]
    then
        password="$default"
    elif [ -t 0 ]
    then
        echo "Enter the $name password, followed by enter:"
        stty -echo
        read password
        stty echo
        printf "\n"
    else
        read password
    fi
    PASSWORD="$password"
}


install()
{
    local repo_name=""
    local group=""
    local org="CognitiveScale"
    local branch="dev"

    unset OPTIND
    while getopts n:g:o:b: o
    do
        case ${o} in
            n) repo_name="$OPTARG";;
            g) group="$OPTARG";;
            o) org="$OPTARG";;
            b) branch="$OPTARG";;
            \?) die "malformed call in configuration file";;
        esac
    done

    if is_not_created \
        "$GOCD_URL_API/admin/pipelines/$repo_name" \
        "$repo_name" \
        "$COOKIE_JAR"
    then
        create_pipeline \
            "$GOCD_URL_API/admin/pipelines" \
            "$COOKIE_JAR" \
            "$JQ_SCRIPT" \
            "$repo_name" \
            "$group" \
            "$org" \
            "$branch"
    else
        update_pipeline \
            "$GOCD_URL_API/admin/pipelines/$repo_name" \
            "$COOKIE_JAR" \
            "$JQ_SCRIPT" \
            "$repo_name" \
            "$group" \
            "$org" \
            "$branch"
    fi
}


is_not_created()
{
    local url="$1"
    local pipeline="$2"
    local cookie_jar="$3"
    local status
    status="$(
        http_status "$url" "$cookie_jar" "application/vnd.go.cd.v1+json")"
    if [ -z "$status" ]
    then die "$url couldn't be contacted"
    elif [ "$status" -eq 404 ]
    then return 0
    elif [ "$status" -eq 200 ]
    then return 1
    else die "$url returned error: $status"
    fi
}


update_pipeline()
{
    local url="$1"
    local cookie_jar="$2"
    local jq_filter_file="$3"
    local name="$4"
    local group="$5"
    local git_org="$6"
    local git_branch="$7"
    local etag
    etag="$(http_etag "$url" "$cookie_jar")"
    json_payload \
        "$jq_filter_file" \
        "$name" \
        "$group" \
        "$git_org" \
        "$git_branch" \
        false \
    | curl --fail --verbose --location \
        --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
        --header 'Accept: application/vnd.go.cd.v1+json' \
        --header 'Content-Type: application/json' \
        --header "If-Match: $etag" \
        --request PUT \
        --data @- \
        "$url"
}


create_pipeline()
{
    local url="$1"
    local cookie_jar="$2"
    local jq_filter_file="$3"
    local name="$4"
    local group="$5"
    local git_org="$6"
    local git_branch="$7"
    json_payload \
        "$jq_filter_file" \
        "$name" \
        "$group" \
        "$git_org" \
        "$git_branch" \
        true \
    | curl --fail --verbose --location \
        --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
        --header 'Accept: application/vnd.go.cd.v1+json' \
        --header 'Content-Type: application/json' \
        --request POST \
        --data @- \
        "$url"
}


http_status()
{
    local url="$1"
    local cookie_jar="$2"
    local accept="$3"
    call_http "$url" "$cookie_jar" "HTTP/" "$accept"
}


http_etag()
{
    local url="$1"
    local cookie_jar="$2"
    call_http "$url" "$cookie_jar" "ETag:" "application/vnd.go.cd.v1+json"
}


call_http()
{
    local url="$1"
    local cookie_jar="$2"
    local prefix="$3"
    local accept="$4"
    curl --silent --location --include \
        --max-time 2 \
        --header "Accept: $accept" \
        --cookie "$cookie_jar" --cookie-jar "$cookie_jar" \
        "$url" \
    | grep -i "^$prefix" \
    | tail -1 \
    | awk '{ print $2 }'
}


json_payload()
{
    jq_filter_file="$1"
    name="$2"
    group="$3"
    git_org="$4"
    git_branch="$5"
    create="$6"
    jq --from-file "$jq_filter_file" << EOF
{
    "name": "${name}",
    "group": "${group}",
    "git_org": "${git_org}",
    "git_branch": "${git_branch}",
    "create": ${create}
}
EOF
}


abspath()
{
    local target="$1"
    local old_pwd="$(pwd)"
    cd "$(dirname "$target")"
    while [ -L "$target" ]
    do
        target="$(readlink "$target")"
        cd "$(dirname "$target")"
    done
    echo "$(pwd -P)/$(basename "$target")"
    cd "$old_pwd"
}


die()
{
    local msg="$1"
    echo "ERROR: $msg" > /dev/stderr
    exit 1
}


main "$@"
